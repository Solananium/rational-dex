use std::str::FromStr;

use anchor_client::{
    solana_sdk::{
        commitment_config::CommitmentConfig, pubkey::Pubkey, signature::read_keypair_file,
        signer::Signer, system_instruction::create_account, system_program,
    },
    Client, Cluster,
};

use rational_dex_program::{accounts, instruction}; // generated by anchor build

#[test]
fn test_initialize() {
    let program_id = "423RnyowFFTqfPRsKAWPEvprwTvcTG3jpHFAKrqPdiwv";
    let anchor_wallet = std::env::var("ANCHOR_WALLET").unwrap();
    let payer = read_keypair_file(&anchor_wallet).unwrap();

    let client = Client::new_with_options(Cluster::Localnet, &payer, CommitmentConfig::confirmed());
    let program_id = Pubkey::from_str(program_id).unwrap();
    let program = client.program(program_id).unwrap();

    let tx = program
        .request()
        .accounts(rational_dex_program::accounts::Initialize {})
        .args(rational_dex_program::instruction::Initialize {})
        .send()
        .expect("");

    println!("Your transaction signature {}", tx);
}

#[test]
fn test_initialize_pool() {
    // Program id
    let program_id = Pubkey::from_str("423RnyowFFTqfPRsKAWPEvprwTvcTG3jpHFAKrqPdiwv").unwrap();

    // Wallet
    let anchor_wallet = std::env::var("ANCHOR_WALLET").unwrap();
    let payer = read_keypair_file(&anchor_wallet).unwrap();

    // Anchor client
    let client = Client::new_with_options(Cluster::Localnet, &payer, CommitmentConfig::confirmed());
    let program = client.program(program_id).unwrap();

    // Derive the pool PDA
    let (pool_pda, _bump) = Pubkey::find_program_address(&[b"pool"], &program_id);

    let vault_a = Pubkey::new_unique();
    let vault_b = Pubkey::new_unique();
    let mint_a = Pubkey::new_unique();
    let mint_b = Pubkey::new_unique();
    let mint_lp = Pubkey::new_unique();

    // Call instruction
    let tx = program
        .request()
        .accounts(accounts::InitializePool {
            authority: payer.pubkey(),
            pool: pool_pda,
            vault_a,
            vault_b,
            mint_a,
            mint_b,
            mint_lp,
            system_program: system_program::id(),
            token_program: spl_token::id(),
        })
        .args(instruction::InitializePool {
            fee_num: 1000,
            fee_den: 10000,
        })
        .send()
        .expect("Failed to send initialize tx");

    println!("âœ… Transaction signature: {}", tx);
}
